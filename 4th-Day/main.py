# -*- coding: utf-8 -*-
"""Untitled288.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/137J9_XRRN6qdGrDvLY5-wzjAf_WTgZu1
"""

import os
import json
import openai
import httpx
from fastapi import FastAPI, WebSocket
from dotenv import load_dotenv

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

app = FastAPI()

# Function schema for OpenAI Function Calling
functions = [
    {
        "name": "get_weather",
        "description": "도시의 현재 날씨를 조회합니다.",
        "parameters": {
            "type": "object",
            "properties": {
                "city": {"type": "string", "description": "도시 이름, 예: Seoul"},
            },
            "required": ["city"],
        },
    }
]

# 실제 날씨 API 호출 함수 (예: OpenWeatherMap)
async def get_weather(city):
    api_key = "YOUR_OPENWEATHERMAP_API_KEY"
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&lang=kr&units=metric"
    async with httpx.AsyncClient() as client:
        resp = await client.get(url)
        data = resp.json()
        if resp.status_code == 200:
            return f"{city}의 현재 온도는 {data['main']['temp']}°C, 날씨: {data['weather'][0]['description']}"
        else:
            return f"{city}의 날씨 정보를 가져올 수 없습니다."

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    while True:
        user_msg = await websocket.receive_text()
        # 1. OpenAI API에 메시지 전달 (Function Calling)
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo-1106",
            messages=[{"role": "user", "content": user_msg}],
            functions=functions,
            function_call="auto"
        )
        message = response["choices"][0]["message"]

        # 2. Function Call 요청이 있으면 실제 함수 실행
        if message.get("function_call"):
            func_name = message["function_call"]["name"]
            args = json.loads(message["function_call"]["arguments"])
            if func_name == "get_weather":
                city = args.get("city")
                weather_info = await get_weather(city)
                # 3. Function Call 결과를 OpenAI에 전달하여 최종 답변 생성
                followup = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo-1106",
                    messages=[
                        {"role": "user", "content": user_msg},
                        message,
                        {
                            "role": "function",
                            "name": "get_weather",
                            "content": weather_info
                        }
                    ]
                )
                final_answer = followup["choices"][0]["message"]["content"]
                await websocket.send_text(final_answer)
        else:
            # Function Call이 없으면 바로 답변
            await websocket.send_text(message["content"])